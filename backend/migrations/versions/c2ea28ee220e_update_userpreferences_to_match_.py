"""update UserPreferences to match questionnaire

Revision ID: c2ea28ee220e
Revises: ef93a9390e60
Create Date: 2025-04-16 13:47:56.934762

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c2ea28ee220e'
down_revision: Union[str, None] = 'ef93a9390e60'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_preferences', sa.Column('proximity_pref_shops', sa.Boolean(), nullable=True))
    op.add_column('user_preferences', sa.Column('proximity_pref_gym', sa.Boolean(), nullable=True))
    op.add_column('user_preferences', sa.Column('dog_park_nearby', sa.Enum('YES', 'NO', 'NO_PREFERENCE', name='yesnopref'), nullable=True))
    op.add_column('user_preferences', sa.Column('learning_space_nearby', sa.Enum('YES', 'NO', 'NO_PREFERENCE', name='yesnopref'), nullable=True))
    op.add_column('user_preferences', sa.Column('green_spaces_importance', sa.Enum('NOT_IMPORTANT', 'SOMEWHAT', 'VERY', name='importancescale'), nullable=True))
    op.add_column('user_preferences', sa.Column('medical_center_importance', sa.Enum('NOT_IMPORTANT', 'SOMEWHAT', 'VERY', name='importancescale'), nullable=True))
    op.add_column('user_preferences', sa.Column('schools_importance', sa.Enum('NOT_IMPORTANT', 'SOMEWHAT', 'VERY', name='importancescale'), nullable=True))
    op.drop_column('user_preferences', 'dealbreaker_no_elevator_high')
    op.drop_column('user_preferences', 'social_community_importance')
    op.drop_column('user_preferences', 'parking_importance')
    op.drop_column('user_preferences', 'proximity_shops_importance')
    op.drop_column('user_preferences', 'priority_price')
    op.drop_column('user_preferences', 'compromise_size_for_location')
    op.drop_column('user_preferences', 'pref_apt_type_new')
    op.drop_column('user_preferences', 'needs_pet_friendly')
    op.drop_column('user_preferences', 'needs_balcony')
    op.drop_column('user_preferences', 'dealbreaker_no_parking')
    op.drop_column('user_preferences', 'budget_max')
    op.drop_column('user_preferences', 'pref_apt_type_renovated')
    op.drop_column('user_preferences', 'needs_furnished')
    op.drop_column('user_preferences', 'priority_work')
    op.drop_column('user_preferences', 'preferred_size')
    op.drop_column('user_preferences', 'wfh_needs_quiet_area')
    op.drop_column('user_preferences', 'pref_apt_type_old')
    op.drop_column('user_preferences', 'avoid_construction')
    op.drop_column('user_preferences', 'nearby_restaurants_importance')
    op.drop_column('user_preferences', 'budget_min')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_preferences', sa.Column('budget_min', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('nearby_restaurants_importance', postgresql.ENUM('NOT_IMPORTANT', 'SOMEWHAT', 'VERY', name='importancescale'), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('avoid_construction', postgresql.ENUM('YES', 'NO', 'NO_PREFERENCE', name='yesnopref'), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('pref_apt_type_old', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('wfh_needs_quiet_area', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('preferred_size', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('priority_work', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('needs_furnished', postgresql.ENUM('YES', 'NO', 'NO_PREFERENCE', name='yesnopref'), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('pref_apt_type_renovated', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('budget_max', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('dealbreaker_no_parking', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('needs_balcony', postgresql.ENUM('YES', 'NO', 'NO_PREFERENCE', name='yesnopref'), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('needs_pet_friendly', postgresql.ENUM('YES', 'NO', 'NO_PREFERENCE', name='yesnopref'), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('pref_apt_type_new', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('compromise_size_for_location', postgresql.ENUM('YES', 'NO', 'NO_PREFERENCE', name='yesnopref'), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('priority_price', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('proximity_shops_importance', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('parking_importance', postgresql.ENUM('ESSENTIAL', 'PREFERABLE', 'NOT_IMPORTANT', name='parkingimportance'), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('social_community_importance', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_preferences', sa.Column('dealbreaker_no_elevator_high', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_column('user_preferences', 'schools_importance')
    op.drop_column('user_preferences', 'medical_center_importance')
    op.drop_column('user_preferences', 'green_spaces_importance')
    op.drop_column('user_preferences', 'learning_space_nearby')
    op.drop_column('user_preferences', 'dog_park_nearby')
    op.drop_column('user_preferences', 'proximity_pref_gym')
    op.drop_column('user_preferences', 'proximity_pref_shops')
    # ### end Alembic commands ###
